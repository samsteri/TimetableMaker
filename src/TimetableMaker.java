
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.text.MessageFormat;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;

/**
 *
 * @author Sami
 */
public class TimetableMaker extends javax.swing.JFrame {

    /**
     * Creates new form TimetableEditor
     */
    public TimetableMaker() {
        initComponents();

        // Init column names
        String[] days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
        // Create a new timetablemodel with previous columns and 8 rows
        TimetableModel tm = new TimetableModel(days, 8);
        jTable1.setModel(tm);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setRowHeight((int)rowHeight.getValue());

        // Init day values
        monday.setSelected(true);
        tuesday.setSelected(true);
        wednesday.setSelected(true);
        thursday.setSelected(true);
        friday.setSelected(true);

        // Use a default renderer
        jTable1.setDefaultRenderer(Object.class, new ColorRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ttMenu = new javax.swing.JPopupMenu();
        editColor = new javax.swing.JMenuItem();
        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        cancelColor = new javax.swing.JButton();
        colorsetBtn = new javax.swing.JButton();
        newDialog = new javax.swing.JDialog();
        monday = new javax.swing.JCheckBox();
        friday = new javax.swing.JCheckBox();
        thursday = new javax.swing.JCheckBox();
        tuesday = new javax.swing.JCheckBox();
        wednesday = new javax.swing.JCheckBox();
        sunday = new javax.swing.JCheckBox();
        saturday = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        cancelCreation = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        timetableRows = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        displayTime = new javax.swing.JCheckBox();
        startHour = new javax.swing.JSpinner();
        startMin = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        activityInterval = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        rowHeight = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        createNew = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        print = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        redo = new javax.swing.JMenuItem();

        editColor.setText("Set color...");
        editColor.setToolTipText("");
        editColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editColorActionPerformed(evt);
            }
        });
        ttMenu.add(editColor);

        colorDialog.setTitle("Set color");

        cancelColor.setText("Cancel");
        cancelColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelColorActionPerformed(evt);
            }
        });

        colorsetBtn.setText("Ok");
        colorsetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorsetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelColor)
                .addGap(18, 18, 18)
                .addComponent(colorsetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        colorDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelColor, colorsetBtn});

        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelColor)
                    .addComponent(colorsetBtn))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        newDialog.setTitle("New timetable");

        monday.setText("Monday");

        friday.setText("Friday");

        thursday.setText("Thursday");

        tuesday.setText("Tuesday");

        wednesday.setText("Wednesday");

        sunday.setText("Sunday");

        saturday.setText("Saturday");

        jLabel1.setText("Days in the timetable:");

        cancelCreation.setText("Cancel");
        cancelCreation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCreationActionPerformed(evt);
            }
        });

        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        timetableRows.setModel(new javax.swing.SpinnerNumberModel(8, 1, 24, 1));
        timetableRows.setEditor(new javax.swing.JSpinner.NumberEditor(timetableRows, ""));

        jLabel2.setText("Rows in the timetable:");

        jLabel3.setText("Time:");

        displayTime.setText("Display time");
        displayTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                displayTimeStateChanged(evt);
            }
        });

        startHour.setModel(new javax.swing.SpinnerNumberModel(8, 0, 23, 1));

        startMin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jLabel4.setText("Starting time (h:min):");

        jLabel5.setText("Interval (in minutes):");

        activityInterval.setModel(new javax.swing.SpinnerNumberModel(45, 0, null, 1));

        jLabel6.setText("Row height:");

        rowHeight.setModel(new javax.swing.SpinnerNumberModel(20, 0, 100, 1));

        javax.swing.GroupLayout newDialogLayout = new javax.swing.GroupLayout(newDialog.getContentPane());
        newDialog.getContentPane().setLayout(newDialogLayout);
        newDialogLayout.setHorizontalGroup(
            newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayTime)
                    .addComponent(jLabel1)
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(monday)
                            .addComponent(saturday))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sunday))
                    .addComponent(jLabel3)
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addComponent(cancelCreation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createBtn))
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startMin, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(newDialogLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(tuesday)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(newDialogLayout.createSequentialGroup()
                                .addComponent(timetableRows)
                                .addGap(35, 35, 35)))
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newDialogLayout.createSequentialGroup()
                                .addComponent(wednesday)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(thursday)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(friday))
                            .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(activityInterval, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(rowHeight, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {startHour, startMin});

        newDialogLayout.setVerticalGroup(
            newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monday, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tuesday)
                    .addComponent(wednesday)
                    .addComponent(thursday)
                    .addComponent(friday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saturday)
                    .addComponent(sunday))
                .addGap(17, 17, 17)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timetableRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayTime)
                .addGap(18, 18, 18)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(5, 5, 5)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activityInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelCreation)
                    .addComponent(createBtn))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Timetable Maker");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
            }
        ));
        jTable1.setComponentPopupMenu(ttMenu);
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");

        createNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        createNew.setMnemonic('c');
        createNew.setText("Create new...");
        createNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewActionPerformed(evt);
            }
        });
        jMenu1.add(createNew);

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setMnemonic('o');
        open.setText("Open...");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setMnemonic('s');
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);
        jMenu1.add(jSeparator1);

        print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        print.setMnemonic('p');
        print.setText("Print...");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        jMenu1.add(print);
        jMenu1.add(jSeparator2);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exit.setMnemonic('x');
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('E');
        jMenu2.setText("Edit");
        jMenu2.setToolTipText("");

        undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo.setMnemonic('u');
        undo.setText("Undo");
        undo.setToolTipText("");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        jMenu2.add(undo);

        redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redo.setMnemonic('r');
        redo.setText("Redo");
        redo.setToolTipText("");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        jMenu2.add(redo);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler for the exit menu item. Closes the program, if user
     * selects yes from confirm dialog.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        confirm();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Event handler for the table's popup menu. Displays a color chooser
     * for the selected cells.
     *
     * @param evt ActionEvent from the popup menu item.
     */
    private void editColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editColorActionPerformed
        colorDialog.pack();
        colorDialog.setVisible(true);
    }//GEN-LAST:event_editColorActionPerformed

    /**
     * Event handler for the setting of color. Saves the color value as the
     * selected cells' background.
     *
     * @param evt ActionEvent from the button.
     */
    private void colorsetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorsetBtnActionPerformed
        Color c = jColorChooser1.getColor();

        // Get all cells that are selected
        int[] cols = jTable1.getSelectedColumns();
        int[] rows = jTable1.getSelectedRows();

        TimetableModel ttm = (TimetableModel)jTable1.getModel();

        // Change every selected cells colour
        for (int col = 0; col < cols.length; col++) {
            for (int row = 0; row < rows.length; row++) {
                ttm.setColorAt(c, rows[row], cols[col]);
            }
        }

        // Color changes can also be undone/redone
        updateUndoElements();

        colorDialog.setVisible(false);
    }//GEN-LAST:event_colorsetBtnActionPerformed

    /**
     * Event handler for the canceling of color set. Closes the
     * color dialog window.
     *
     * @param evt ActionEvent from the button.
     */
    private void cancelColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelColorActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_cancelColorActionPerformed

    /**
     * Event handler for the create new menu item. Opens the creation dialog.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void createNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewActionPerformed
        newDialog.pack();
        displayTime.setSelected(true);
        newDialog.setVisible(true);
    }//GEN-LAST:event_createNewActionPerformed

    /**
     * Event handler for the create new button. Creates a new timetable.
     *
     * @param evt ActionEvent from the button.
     */
    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // Set the user specified row height
        jTable1.setRowHeight((int)rowHeight.getValue());

        int columns = 0;

        // Count the selected days aka columns
        if (monday.isSelected())
            columns++;
        if (tuesday.isSelected())
            columns++;
        if (wednesday.isSelected())
            columns++;
        if (thursday.isSelected())
            columns++;
        if (friday.isSelected())
            columns++;
        if (saturday.isSelected())
            columns++;
        if (sunday.isSelected())
            columns++;

        // If time is displayed, it consumes one column like days
        if (displayTime.isSelected())
            columns++;

        String[] days = new String[columns];

        // Get the amount of rows
        int rows = (int)timetableRows.getValue();
        // Now we have rows and columns for the data
        Object[][] table = new Object[rows][days.length];

        // Index of the columns going to be generated
        int i = 0;

        // First column is times if they are selected
        if (displayTime.isSelected()) {
            days[i] = "";
            i++;
            // Insert the correct time values
            table = insertTime(table, (int)startHour.getValue(), (int)startMin.getValue(), (int)activityInterval.getValue());
        }
        // Check which days are selected and add them from monday to sunday
        if (monday.isSelected()) {
            days[i] = "Monday";
            i++;
        }
        if (tuesday.isSelected()) {
            days[i] = "Tuesday";
            i++;
        }
        if (wednesday.isSelected()) {
            days[i] = "Wednesday";
            i++;
        }
        if (thursday.isSelected()) {
            days[i] = "Thursday";
            i++;
        }
        if (friday.isSelected()) {
            days[i] = "Friday";
            i++;
        }
        if (saturday.isSelected()) {
            days[i] = "Saturday";
            i++;
        }
        if (sunday.isSelected()) {
            days[i] = "Sunday";
            i++;
        }

        // Create the actual model and set it to jTable1
        TimetableModel tm = new TimetableModel(days, table);
        jTable1.setModel(tm);

        newDialog.setVisible(false);
    }//GEN-LAST:event_createBtnActionPerformed

    /**
     * Event handler for the cancel of creating new menu item. Closes the
     * creation dialog.
     *
     * @param evt ActionEvent from the button.
     */
    private void cancelCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCreationActionPerformed
        newDialog.setVisible(false);
    }//GEN-LAST:event_cancelCreationActionPerformed

    /**
     * Event handler for the display time checkbox. Disables or enables
     * the time settings accordingly.
     *
     * @param evt ActionEvent from the checkbox.
     */
    private void displayTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_displayTimeStateChanged
        if (!displayTime.isSelected()) {
            startHour.setEnabled(false);
            startMin.setEnabled(false);
            activityInterval.setEnabled(false);
        }
        else {
            startHour.setEnabled(true);
            startMin.setEnabled(true);
            activityInterval.setEnabled(true);
        }
    }//GEN-LAST:event_displayTimeStateChanged

    /**
     * Event handler for the timetable's property changes. Updates the undos
     * and redos when something happens.
     *
     * @param evt ActionEvent from property change.
     */
    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        // Update the undo elements
        try {
            updateUndoElements();
        }
        // Must catch because in the beginning model is DefaultTableModel and
        // it cannot be cast to TimetableModel
        catch (ClassCastException ex) {}
    }//GEN-LAST:event_jTable1PropertyChange

    /**
     * Event handler for the undo menu item. Undos the previous change to table.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        TimetableModel ttm = (TimetableModel)jTable1.getModel();
        if (ttm.undos.canUndo()) {
            ttm.undos.undo();
            updateUndoElements();
        }
    }//GEN-LAST:event_undoActionPerformed

    /**
     * Event handler for the redo menu item. Redos the previous change to table.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        TimetableModel ttm = (TimetableModel)jTable1.getModel();
        if (ttm.undos.canRedo()) {
            ttm.undos.redo();
            updateUndoElements();
        }
    }//GEN-LAST:event_redoActionPerformed

    /**
     * Event handler for the save menu item. Displays a save dialog
     * and saves the timetable in textual form.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // Open file chooser and open save dialog
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(rootPane);

        // Save if something sensible was chosen in the dialog
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                // Save the file info
                File f = fc.getSelectedFile();
                // Add ".txt" so we only save text files
                String filename = f.getAbsolutePath() + ".txt";

                // Output is a text file
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
                fc.setFileFilter(filter);

                Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename), "UTF-8"));

                // First write the column names
                for (int i = 0; i < jTable1.getColumnCount(); i++) {
                    if (jTable1.getColumnName(i) != null) {
                        String colname = jTable1.getColumnName(i);
                        // Format the strings to be 10 chars wide and end with
                        // a line.
                        writer.write(String.format("%-15s|", colname));
                    }
                }

                // New line after the column names
                writer.write("\n");

                TableModel tm = jTable1.getModel();

                // Now write the actual content of timetable
                for (int i = 0; i < tm.getRowCount(); i++) {
                    for (int j = 0; j < tm.getColumnCount(); j++) {
                        if (tm.getValueAt(i, j) != null) {
                            String val = tm.getValueAt(i, j).toString();
                            // Same formatting as before
                            writer.write(String.format("%-15s|", val));
                        }
                        // If nothing is set nothing gets put on the timetable
                        else
                            writer.write(String.format("%-15s|", " "));
                    }
                    // No new line after the last row
                    if (i < tm.getRowCount()-1)
                        writer.write("\n");
                }
                writer.close();
            } catch (UnsupportedEncodingException ex) {
                System.out.println("Unsupported encoding");
            } catch (FileNotFoundException ex) {
                System.out.println("File not found");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * Event handler for the print menu item. Displays a print dialog
     * and prints the timetable.
     *
     * From course material GraphicsExample.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        PrinterJob job = PrinterJob.getPrinterJob(); // A factory method is used to get an instance of PrinterJob

        // Add the header and footer to the print
        MessageFormat mf = new MessageFormat("TIMETABLE");
        MessageFormat mf1 = new MessageFormat("Page - {0}");

        // stackoverflow, questions/9724419
        // Sets margins to the printed timetable
        PageFormat pf = job.defaultPage();
        Paper paper = pf.getPaper();
        double margin = 20.;
        paper.setImageableArea(margin, paper.getImageableY(), paper.getWidth() - 2* margin, paper.getImageableHeight());
        pf.setPaper(paper);

        job.setPrintable(jTable1.getPrintable(JTable.PrintMode.FIT_WIDTH, mf, mf1), job.validatePage(pf)); // set the content to be printed

        if (job.printDialog()) { // Display the print dialog and print of use selected "Print"
            try {
                job.print(); // Do the actual print
            } catch (PrinterException ex) {
                Logger.getLogger(TimetableMaker.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_printActionPerformed

    /**
     * Event handler for the open menu item. Displays an opening dialog
     * and opens a timetable from textual form.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        try {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(rootPane);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                // Get the selected file and init scanner
                File f = fc.getSelectedFile();
                Scanner reader = new Scanner(f);

                // Count the number of rows
                int rows = 0;
                while (reader.hasNextLine()) {
                    rows++;
                    System.out.println(rows);
                    reader.nextLine();
                }

                // Close the reader and start a new one
                reader.close();
                reader = new Scanner(f);
                // Bar separates the values in text file
                reader.useDelimiter("\\|");

                // Count the cells
                int cells = 0;
                while (reader.hasNext()) {
                    String value = reader.next();
                    System.out.println(value);
                    cells++;
                }

                // Columns can be counted by dividing cells with rows
                int columns = cells/rows;

                // Array for titles
                String[] titles = new String[columns];
                // 2D array for the table contents. Title row gets
                // deducted from the data rows.
                Object[][] tabledata = new Object[rows-1][columns];

                // Close and init a new scanner again
                reader.close();
                reader = new Scanner(f);
                reader.useDelimiter("\\|");

                int row = 0;
                int column = 0;
                int linenum = 0;

                while (reader.hasNextLine()) {
                    String line = reader.nextLine();
                    // A new scanner with previous scanner's line
                    Scanner linereader = new Scanner(line);
                    linereader.useDelimiter("\\|");

                    // If column names
                    if (linenum == 0) {
                        while (linereader.hasNext()) {
                            // Trim the whitespaces used in saved file
                            titles[column] = linereader.next().trim();
                            // Move on to next columns
                            column++;
                        }
                        // Move on to the data
                        linenum++;
                        // Init column back to 0
                        column = 0;
                    }
                    else {
                        while (linereader.hasNext()) {
                            tabledata[row][column] = linereader.next().trim();
                            column++;
                        }
                    row++;
                    column = 0;
                    }
                }

                TimetableModel ttm = new TimetableModel(titles, tabledata);
                jTable1.setModel(ttm);
            }
        }
        catch (HeadlessException | FileNotFoundException e) {}
    }//GEN-LAST:event_openActionPerformed

    /**
     * Event handler for window closing action. Closes the program, if user
     * selects yes from confirm dialog.
     *
     * @param evt ActionEvent from the menu item.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirm();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Displays confirmation dialog for closing the program.
     *
     */
    private void confirm() {
        int answr;
        answr = JOptionPane.showConfirmDialog(this, "Really close?", "Confirm close", JOptionPane.YES_NO_OPTION);
        if (answr == 0)
            dispose();
    }

    /**
     * Updates the undo and redo menu texts and enables/disables
     * them based on the TimetableModel's UndoManager status.
     */
    void updateUndoElements() {
        TimetableModel tm = (TimetableModel)jTable1.getModel();
        undo.setEnabled(tm.undos.canUndo());
        redo.setEnabled(tm.undos.canRedo());
    }

    /**
     * Inserts times automatically to the timetable based on the starting
     * time and length of activity.
     *
     * @param o Table that gets the times.
     * @param h Starting hour of activity.
     * @param min Starting minutes of activity.
     * @param interval The length of activity.
     * @return Table data that has automatically generated times.
     */
    public Object[][] insertTime(Object[][] o, int h, int min, int interval) {

        for (int i = 0; i < o.length; i++) {
            // Formatting the hours and minutes to have leading zeros
            String time = String.format("%02d", h) + ":" + String.format("%02d", min);

            // Time gets added to the time column
            o[i][0] = time;

            // New minutes
            min = min + interval;

            // Get new hours
            if (min >= 60) {
                while (min >= 60) {
                    // One hour gets deducted from minutes...
                    min = min - 60;
                    // ...and added to the hours
                    h = h + 1;

                    // If we go over midnight the hours are reseted
                    if (h > 23)
                        h = 0;
                }
            }

        }
        return o;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimetableMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimetableMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimetableMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimetableMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimetableMaker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner activityInterval;
    private javax.swing.JButton cancelColor;
    private javax.swing.JButton cancelCreation;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JButton colorsetBtn;
    private javax.swing.JButton createBtn;
    private javax.swing.JMenuItem createNew;
    private javax.swing.JCheckBox displayTime;
    private javax.swing.JMenuItem editColor;
    private javax.swing.JMenuItem exit;
    private javax.swing.JCheckBox friday;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JCheckBox monday;
    private javax.swing.JDialog newDialog;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem print;
    private javax.swing.JMenuItem redo;
    private javax.swing.JSpinner rowHeight;
    private javax.swing.JCheckBox saturday;
    private javax.swing.JMenuItem save;
    private javax.swing.JSpinner startHour;
    private javax.swing.JSpinner startMin;
    private javax.swing.JCheckBox sunday;
    private javax.swing.JCheckBox thursday;
    private javax.swing.JSpinner timetableRows;
    private javax.swing.JPopupMenu ttMenu;
    private javax.swing.JCheckBox tuesday;
    private javax.swing.JMenuItem undo;
    private javax.swing.JCheckBox wednesday;
    // End of variables declaration//GEN-END:variables
}
